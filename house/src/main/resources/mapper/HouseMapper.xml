<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zm.service.mapper.HouseMapper" >
		
	<resultMap id="MySimpleHouse" type="com.zm.service.entity.SimpleHouse" >
	    <id column="id" property="id" jdbcType="INTEGER" />
	    <result column="name" property="name" jdbcType="VARCHAR" />
	    <result column="imglist" property="imglist" jdbcType="VARCHAR" />
	    <result column="area" property="area" jdbcType="INTEGER" />
	    <result column="room" property="room" jdbcType="INTEGER" />
	    <result column="parlor" property="parlor" jdbcType="INTEGER" />
	    <result column="toilet" property="toilet" jdbcType="INTEGER" />
	    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
	    <result column="amount" property="amount" jdbcType="INTEGER" />
	    <result column="distance" property="distance" jdbcType="INTEGER" />
	    <result column="tags" property="tags" jdbcType="VARCHAR" />
	    <result column="uid" property="uid" jdbcType="INTEGER" />
  	</resultMap>

	<select id="searchHouseByTag" resultMap="MySimpleHouse">
	    SELECT id, name, uid, imglist, area, parlor, room, toilet, amount, createtime, distance, tags FROM (
		SELECT t_house.id, t_house.name, t_house.uid, t_house.imglist, t_house.area, t_house.room, t_house.parlor, t_house.toilet, t_house.amount, t_house.createtime, ROUND(
			6378.138 * 2 * ASIN(
	        	SQRT(
	                POW(
	                	SIN(
	                    	(
	                          #{lat,jdbcType=DOUBLE} * PI() / 180 - t_house.latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS( #{lat,jdbcType=DOUBLE} * PI() / 180) * COS( t_house.latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{lon,jdbcType=DOUBLE} * PI() / 180 - t_house.longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	        	)
	        ) * 1000
	   ) AS distance, CONCAT("[",GROUP_CONCAT(CONCAT("\"",t_housetag.tagname,"\"")),"]") as tags, count(*) as num FROM t_housetag left join t_house on t_housetag.houseid = t_house.id WHERE t_housetag.tagid in ${tags} AND (t_housetag.good-t_housetag.bad) > 0 AND t_house.type = #{type,jdbcType=TINYINT} AND t_house.amount BETWEEN #{min,jdbcType=INTEGER} AND #{max,jdbcType=INTEGER} AND t_house.outdate &lt;= #{date,jdbcType=VARCHAR} AND t_house.tip &lt;= #{tip,jdbcType=INTEGER} AND t_house.state = 1 AND t_house.latitude BETWEEN #{lat,jdbcType=DOUBLE}-0.1 AND #{lat,jdbcType=DOUBLE}+0.1 AND t_house.longitude BETWEEN #{lon,jdbcType=DOUBLE}-0.1 AND #{lon,jdbcType=DOUBLE}+0.1 GROUP BY t_housetag.houseid ORDER BY distance ASC 
		) AS temp where temp.num = #{tagSize,jdbcType=INTEGER} LIMIT #{offset,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
	</select>
	
	<select id="searchHouseWithRoomByTag" resultMap="MySimpleHouse">
	    SELECT id, name, uid, imglist, area,  parlor, room, toilet, amount, createtime, distance, tags FROM (
		SELECT t_house.id, t_house.name, t_house.uid, t_house.imglist, t_house.area, t_house.room, t_house.parlor, t_house.toilet, t_house.amount, t_house.createtime, ROUND(
			6378.138 * 2 * ASIN(
	        	SQRT(
	                POW(
	                	SIN(
	                    	(
	                          #{lat,jdbcType=DOUBLE} * PI() / 180 - t_house.latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS( #{lat,jdbcType=DOUBLE} * PI() / 180) * COS( t_house.latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{lon,jdbcType=DOUBLE} * PI() / 180 - t_house.longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	        	)
	        ) * 1000
	   ) AS distance, CONCAT("[",GROUP_CONCAT(CONCAT("\"",t_housetag.tagname,"\"")),"]") as tags, count(*) as num FROM t_housetag left join t_house on t_housetag.houseid = t_house.id WHERE t_housetag.tagid in ${tags} AND (t_housetag.good-t_housetag.bad) > 0 AND t_house.room = #{room,jdbcType=INTEGER} AND t_house.type = #{type,jdbcType=TINYINT} AND t_house.amount BETWEEN #{min,jdbcType=INTEGER} AND #{max,jdbcType=INTEGER} AND t_house.outdate &lt;= #{date,jdbcType=VARCHAR} AND t_house.tip &lt;= #{tip,jdbcType=INTEGER} AND t_house.state = 1 AND t_house.latitude BETWEEN #{lat,jdbcType=DOUBLE}-0.1 AND #{lat,jdbcType=DOUBLE}+0.1 AND t_house.longitude BETWEEN #{lon,jdbcType=DOUBLE}-0.1 AND #{lon,jdbcType=DOUBLE}+0.1  GROUP BY t_housetag.houseid ORDER BY distance ASC 
		) AS temp where temp.num = #{tagSize,jdbcType=INTEGER} LIMIT #{offset,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
	</select>
	
	<select id="searchHouse" resultMap="MySimpleHouse">
		SELECT t_house.id, t_house.name, t_house.uid, t_house.imglist, t_house.area, t_house.room, t_house.parlor, t_house.toilet, t_house.amount, t_house.createtime, ROUND(
			6378.138 * 2 * ASIN(
	        	SQRT(
	                POW(
	                	SIN(
	                    	(
	                          #{lat,jdbcType=DOUBLE} * PI() / 180 - t_house.latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS( #{lat,jdbcType=DOUBLE} * PI() / 180) * COS( t_house.latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{lon,jdbcType=DOUBLE} * PI() / 180 - t_house.longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	        	)
	        ) * 1000
	   ) AS distance, CONCAT("[",GROUP_CONCAT(CONCAT("\"",t_housetag.tagname,"\"")),"]") as tags FROM t_house LEFT JOIN t_housetag ON t_housetag.houseid = t_house.id WHERE t_house.type = #{type,jdbcType=TINYINT} AND t_house.amount BETWEEN #{min,jdbcType=INTEGER} AND #{max,jdbcType=INTEGER} AND t_house.outdate &lt;= #{date,jdbcType=VARCHAR} AND t_house.tip &lt;= #{tip,jdbcType=INTEGER} AND t_house.state = 1 AND t_house.latitude BETWEEN #{lat,jdbcType=DOUBLE}-0.1 AND #{lat,jdbcType=DOUBLE}+0.1 AND t_house.longitude BETWEEN #{lon,jdbcType=DOUBLE}-0.1 AND #{lon,jdbcType=DOUBLE}+0.1 AND (t_housetag.good-t_housetag.bad) > 0 GROUP BY t_housetag.houseid ORDER BY distance ASC LIMIT #{offset,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
	</select>
	
	<select id="searchHouseWithRoom" resultMap="MySimpleHouse">
		SELECT t_house.id, t_house.name, t_house.uid, t_house.imglist, t_house.area, t_house.room, t_house.parlor, t_house.toilet, t_house.amount, t_house.createtime, ROUND(
			6378.138 * 2 * ASIN(
	        	SQRT(
	                POW(
	                	SIN(
	                    	(
	                          #{lat,jdbcType=DOUBLE} * PI() / 180 - t_house.latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS( #{lat,jdbcType=DOUBLE} * PI() / 180) * COS( t_house.latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{lon,jdbcType=DOUBLE} * PI() / 180 - t_house.longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	        	)
	        ) * 1000
	   ) AS distance, CONCAT("[",GROUP_CONCAT(CONCAT("\"",t_housetag.tagname,"\"")),"]") as tags FROM t_house LEFT JOIN t_housetag ON t_housetag.houseid = t_house.id WHERE t_house.room = #{room,jdbcType=INTEGER} AND t_house.type = #{type,jdbcType=TINYINT} AND t_house.amount BETWEEN #{min,jdbcType=INTEGER} AND #{max,jdbcType=INTEGER} AND t_house.outdate &lt;= #{date,jdbcType=VARCHAR} AND t_house.tip &lt;= #{tip,jdbcType=INTEGER} AND t_house.state = 1 AND t_house.latitude BETWEEN #{lat,jdbcType=DOUBLE}-0.1 AND #{lat,jdbcType=DOUBLE}+0.1 AND t_house.longitude BETWEEN #{lon,jdbcType=DOUBLE}-0.1 AND #{lon,jdbcType=DOUBLE}+0.1 AND (t_housetag.good-t_housetag.bad) > 0 GROUP BY t_housetag.houseid ORDER BY distance ASC LIMIT #{offset,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
	</select>
	
	
	<select id="getSimpleHouseById" resultMap="MySimpleHouse">
		SELECT t_house.id, t_house.name, t_house.uid, t_house.imglist, t_house.area, t_house.room, t_house.parlor, t_house.toilet, t_house.amount, t_house.createtime, CONCAT("[",GROUP_CONCAT(t_housetag.tagname),"]") as tags FROM t_house LEFT JOIN t_housetag ON t_housetag.houseid = t_house.id WHERE t_house.id = #{hid,jdbcType=INTEGER} AND (t_housetag.good-t_housetag.bad) > 0 GROUP BY t_housetag.houseid
	</select>
</mapper>